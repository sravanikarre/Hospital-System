package com.hospital.hospital_system.service;

import com.hospital.hospital_system.entity.*;
import com.hospital.hospital_system.repository.*;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.util.*;
import java.util.stream.Collectors;

@Service
public class HospitalService {
    @Autowired
    private DoctorRepository doctorRepository;

    @Autowired
    private HospitalRepository hospitalRepository;
    @Autowired
    private MedicineRepository medicineRepository;
    @Autowired
    private PatientRepository patientRepository;
    @Autowired
    private PrescriptionRepository prescriptionRepository;
    @Autowired
    private SalesPersonRepository salesPersonRepository;

    //Find all medicines prescribed by a specific doctor
    public List<Medicine> getAllMedicines() {
        return doctorRepository.findAll().stream()
                .flatMap(d -> d.getPrescriptions().stream())
                .map(Prescription::getMedicine)
                .collect(Collectors.toList());
    }

    // Get total revenue generated by a SalesPerson

    public Double getRevenueBySalesPerson() {
        return salesPersonRepository.findAll().stream()
                .flatMap(s -> s.getSuppliedMedicines().stream())
                .mapToDouble(Medicine::getPrice).sum();

    }

    // List patients treated by a particular hospital

    public List<Patient> getPatientsTreatedByParticularHosp() {
        return hospitalRepository.findAll().stream()
                .flatMap(h -> h.getDoctors().stream()
                        .flatMap(d -> d.getPrescriptions().stream()))
                .map(Prescription::getPatient).distinct().collect(Collectors.toList());
    }

    //Map each hospital to total number of patients treated
    public Map<String, Long> getTotalPatientsInHopital() {
        return hospitalRepository.findAll().stream()
                .collect(Collectors.toMap(Hospital::getName, h -> h.getDoctors().stream()
                        .flatMap(d -> d.getPrescriptions().stream())
                        .map(p -> p.getPatient().getId()).distinct().count()));

    }

    //Find all medicines that were never prescribed
    public List<Medicine> getMedicinesNeverPrescribed() {
        return medicineRepository.findAll().stream()
                .filter(m -> m.getPrescriptions().isEmpty())
                .collect(Collectors.toList());

    }

    // List top 3 doctors by number of unique patients
    public List<Doctor> getTop3DoctorsByUniquePatients() {
        return doctorRepository.findAll().stream() // this returns List<Doctor>
                .sorted(
                        Comparator.comparingLong((Doctor d) -> d.getPrescriptions().stream()
                                .map(Prescription::getPatient)
                                .map(Patient::getId)
                                .distinct()
                                .count()
                        ).reversed()
                )
                .limit(3)
                .collect(Collectors.toList());
    }

    // Group prescriptions by patient name
    public Map<String,List<Prescription>> getPrescriptionByPatient(){
        return prescriptionRepository.findAll().stream()
                .collect(Collectors.groupingBy(p->p.getPatient().getName()));

    }

}








